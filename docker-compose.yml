version: '3.8'

services:
  # Oracle Database para desarrollo
  oracle-db:
    image: container-registry.oracle.com/database/express:latest
    container_name: dotnet-examples-oracle
    environment:
      - ORACLE_PWD=${ORACLE_PASSWORD:-OraclePass123}
      - ORACLE_CHARACTERSET=AL32UTF8
    ports:
      - "1521:1521"
      - "5500:5500"  # Oracle Enterprise Manager
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./scripts/oracle-init:/opt/oracle/scripts/startup
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD", "sqlplus", "-S", "system/$$ORACLE_PWD@localhost:1521/XE", "<<<", "SELECT 1 FROM dual;"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # SQL Server para Hangfire (alternativa a Oracle para jobs)
  sqlserver-hangfire:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: dotnet-examples-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQLSERVER_PASSWORD:-SqlServerPass123!}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis para caching (opcional)
  redis:
    image: redis:7-alpine
    container_name: dotnet-examples-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch para logging (opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dotnet-examples-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kibana para visualización de logs (opcional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dotnet-examples-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dotnet-examples-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: dotnet-examples-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger para distributed tracing (opcional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: dotnet-examples-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - dotnet-examples-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  oracle_data:
    driver: local
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dotnet-examples-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16